{
    "Typescript UseEffect": {
        "prefix": "ue",
        "body": [
            "useEffect(() => {",
            "    $0",
            "}, [${1:dependencies}]);"
        ],
        "description": "Creates a useEffect hook",
        "scope": "typescript,typescriptreact,javascript,javascriptreact"
    },
    "Typescript UseState": {
        "prefix": "us",
        "body": [
            "const [${1:state}, set${2:State}] = useState<${3:Type}>(${4:initialState});"
        ],
        "description": "Creates a useState hook",
        "scope": "typescript,typescriptreact,javascript,javascriptreact"
    },
    "Typescript React Arrow Function": {
        "prefix": "raf",
        "description": "Creates a React component class with ES7 module system and TypeScript interfaces",
        "body": [
            "const ${1:functionName} = ():${2:returnType} => {",
            "\t$0",
            "}"
        ],
        "scope": "typescript,typescriptreact,javascript,javascriptreact"
    },
    "API Request": {
        "prefix": "apiRequest",
        "body": [
            "export const ${1:functionName} = async (): Promise<ApiResponseData<${2:responseType}>> => {",
            "    try {",
            "        // Set up the API Call Config",
            "        const config: AxiosRequestConfig = {",
            "            method: '${3:GET}',",
            "            url: '${4:API_URL}',",
            "            headers: {},",
            "            data: { },",
            "        };",
            "",
            "        // Make API Call",
            "        const response = await axios.request<ApiResponseData<${2:responseType}>>(config);",
            "        return response.data;",
            "    } catch (error: any) {",
            "        error.response.data.status = false;",
            "        return error.response;",
            "    }",
            "};"
        ],
        "description": "Creates a TypeScript function for making an API request",
        "scope": "typescript"
    },
    "API Request Promise": {
        "prefix": "apiRequestPromise",
        "body": [
            "${1:apiRequestName}(${2:parameters})",
            "\t.then((response: ApiResponseData<${3:responseType}>) => {",
            "\t\t// Add comment here",
            "\t\tif (response.status) {",
            "\t\t\t$0",
            "\t\t} else {",
            "\t\t\t",
            "\t\t}",
            "\t})",
            "\t.catch((error) => {",
            "\t\tconsole.log(error);",
            "\t\tShowToast('Session Expired', ToastType.ERROR);",
            "\t});"
        ],
        "description": "Creates an API request promise chain with error handling",
        "scope": "typescript"
    },
    "Map Function": {
        "prefix": "map",
        "body": [
            "${1:array}.map((${2:item}) => {",
            "\treturn ${3:item};",
            "})"
        ],
        "description": "Creates a map function"
    },
    "If Statement": {
        "prefix": "if",
        "body": [
            "if (${1:condition}) {",
            "\t${2:// Your code here}",
            "}"
        ],
        "description": "Creates an if statement",
        "scope": "typescript,typescriptreact,javascript,javascriptreact"
    },
    "If-Else Statement": {
        "prefix": "ifelse",
        "body": [
            "if (${1:condition}) {",
            "\t${2:// Code to execute if condition is true}",
            "} else {",
            "\t${3:// Code to execute if condition is false}",
            "}"
        ],
        "description": "Creates an if-else statement",
        "scope": "typescript,typescriptreact,javascript,javascriptreact"
    },
    "Conditional Expression with Logical AND": {
        "prefix": "and",
        "body": [
            "{ ${1:condition} && (",
            "\t${2:// Code to execute if condition is true}",
            ")}"
        ],
        "description": "Creates a conditional expression with logical AND",
        "scope": "typescript,typescriptreact,javascript,javascriptreact"
    },
    "Enum": {
        "prefix": "enum",
        "body": [
            "export enum ${1:enumName} {",
            "\t$0",
            "}"
        ],
        "description": "Creates an exported enum in TypeScript",
        "scope": "typescript"
    },
    "Type": {
        "prefix": "type",
        "body": [
            "export type ${1:typeName} = {",
            "\t$0",
            "};"
        ],
        "description": "Creates an exported type in TypeScript",
        "scope": "typescript"
    },
    "React Functional Component with Interface": {
        "prefix": "rfci",
        "body": [
            "interface ${1:name}Props {}",
            "",
            "/** ${2:comment} */",
            "const ${1:name}: React.FC<${1:name}Props> = () => {",
            "\t// Define Contexts",
            "",
            "\t// Define States",
            "",
            "\t// Define Refs",
            "",
            "\t// Helper Functions",
            "",
            "\t// Use Effect and Focus Effect",
            "",
            "\t// View starts here",
            "\treturn (",
            "\t\t<div>",
            "\t\t\t<h1>${1:name}</h1>",
            "\t\t</div>",
            "\t);",
            "};",
            "",
            "export default ${1:name};"
        ],
        "description": "Creates a React functional component with TypeScript interface and exports it",
        "scope": "typescript,typescriptreact,javascript,javascriptreact"
    },
    "Controller Function": {
        "prefix": "cf",
        "body": [
            "/** Add a comment */",
            "const ${1:functionName} = async (req: Request, res: Response): Promise<void> => {",
            "\ttry {",
            "\t\t// Add a comment",
            "\t\tconst ${2:variableId}: number = parseInt(req.params.${2});",
            "",
            "\t\t// Check if required parameters exist",
            "\t\tif (!${2}) {",
            "\t\t\tres.json(responseFormatter(ResponseCode.BAD_REQUEST, false, null, ResponseMessage.BAD_REQUEST));",
            "\t\t\treturn;",
            "\t\t}",
            "",
            "\t\t// Call the service function to ${3:write the action}",
            "\t\tconst ${4:${1}Response} = await ${1}Service(${2});",
            "",
            "\t\tswitch (${4}.status_code) {",
            "\t\t\tcase ResponseCode.SUCCESS:",
            "\t\t\t\tres.json(",
            "\t\t\t\t\tresponseFormatter(",
            "\t\t\t\t\t\tResponseCode.SUCCESS,",
            "\t\t\t\t\t\ttrue,",
            "\t\t\t\t\t\t${4}.data,",
            "\t\t\t\t\t\t\"${6:Write your message here.}\"",
            "\t\t\t\t\t)",
            "\t\t\t\t);",
            "\t\t\t\tbreak;",
            "",
            "\t\t\tcase ResponseCode.NOT_FOUND:",
            "\t\t\t\tres.json(",
            "\t\t\t\t\tresponseFormatter(",
            "\t\t\t\t\t\tResponseCode.NOT_FOUND,",
            "\t\t\t\t\t\tfalse,",
            "\t\t\t\t\t\tnull,",
            "\t\t\t\t\t\t\"${7:Write your message here.}\"",
            "\t\t\t\t\t)",
            "\t\t\t\t);",
            "\t\t\t\tbreak;",
            "",
            "\t\t\tdefault:",
            "\t\t\t\tres.json(responseFormatter(ResponseCode.INTERNAL_SERVER_ERROR, false, null, ResponseMessage.INTERNAL_SERVER_ERROR));",
            "\t\t}",
            "\t} catch (error) {",
            "\t\t// Handle other errors",
            "\t\tres.json(responseFormatter(ResponseCode.INTERNAL_SERVER_ERROR, false, null, error.message));",
            "\t}",
            "};"
        ],
        "description": "Controller Function Snippet",
        "scope": "typescript"
    },
    "Service Function": {
        "prefix": "sf",
        "body": [
            "/** Add a comment */",
            "const ${1:serviceName}Service = async (",
            "\t${2:variable}: ${3:type}",
            "): Promise<ServiceResponseData<${4:Type}>> => {",
            "\ttry {",
            "\t\t// Add a comment",
            "\t\tconst ${5:${1}Response} = await ${6:${1}Query}(${2});",
            "",
            "\t\t// Check if ${5} has a 'status' property or have no data",
            "\t\tif (!${5}.status) {",
            "\t\t\treturn {",
            "\t\t\t\tstatus_code: ResponseCode.INTERNAL_SERVER_ERROR,",
            "\t\t\t};",
            "\t\t}",
            "",
            "\t\t// If ${6:dataName} are not there or is empty",
            "\t\tif (${5}.data?.length === 0) {",
            "\t\t\treturn {",
            "\t\t\t\tstatus_code: ResponseCode.NOT_FOUND,",
            "\t\t\t};",
            "\t\t}",
            "",
            "\t\t// Use the utility function to format the data as per the response required",
            "\t\tconst ${7:formattedData} = ${8:functionNameForFormattingData}(",
            "\t\t\t${5}.data,",
            "\t\t);",
            "",
            "\t\treturn {",
            "\t\t\tdata: ${7},",
            "\t\t\tstatus_code: ResponseCode.SUCCESS,",
            "\t\t};",
            "\t} catch (error) {",
            "\t\treturn {",
            "\t\t\tstatus_code: ResponseCode.INTERNAL_SERVER_ERROR,",
            "\t\t};",
            "\t}",
            "};"
        ],
        "description": "Service Function Snippet",
        "scope": "typescript"
    },
    "Query Function Mongodb": {
        "prefix": "qf",
        "body": [
            "/** Add a comment */",
            "const ${1:queryName}Query = async (",
            "\t${2:variable}: ${3:datatype}",
            "): Promise<QueryResponseData<${4:Type}>> => {",
            "\ttry {",
            "\t\t// Execute MongoDB query",
            "\t\tconst ${5:${1}Result} = await ${6:Model}.find({ ${7:field}: ${2} }).exec();",
            "",
            "\t\t// Return the query results",
            "\t\treturn {",
            "\t\t\tdata: ${5},",
            "\t\t\tstatus: true,",
            "\t\t};",
            "\t} catch (error) {",
            "\t\tconsole.error('MongoDB Query Error:', error);",
            "\t\t// Handle error appropriately",
            "\t\treturn {",
            "\t\t\tstatus: false,",
            "\t\t\terror: error.message,",
            "\t\t};",
            "\t}",
            "};"
        ],
        "description": "MongoDB Query Function Snippet",
        "scope": "typescript"
    },
    "Router Post": {
        "prefix": "rp",
        "body": [
            "// ${1:Add a Comment}",
            "router.post(\"/${2:Add route.}\", ${3:controllerName}.${4:functionName});"
        ],
        "description": "Router-Post Snippet",
        "scope": "typescript"
    },
    "Router Get": {
        "prefix": "rg",
        "body": [
            "// ${1:Add a Comment}",
            "router.get(\"/${2:Add route.}\", ${3:controllerName}.${4:functionName});"
        ],
        "description": "Router-Get Snippet",
        "scope": "typescript"
    }
}